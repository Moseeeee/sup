from aiogram.types import ParseMode, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.types import BotCommandScopeChat, InlineKeyboardMarkup, InlineKeyboardButton, Message
import asyncio, time, re, os, requests, spotipy, wikipediaapi, random, logging
from spotipy.oauth2 import SpotifyClientCredentials
from aiogram import Bot, Dispatcher, types
from datetime import datetime, timedelta
from sympy import sympify, solve
import re

API_TOKEN = '7017976892:AAG5mjQOCmdoBDXSYG69Y3nhejlKnTzSelQ'
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot=bot)


# –ö–æ–º–∞–Ω–¥—ã —Å–æ —Å–ª–µ—à–æ–º
async def set_my_commands(bot, commands, scope):
    await bot.set_my_commands(commands, scope=scope)


async def set_commands_for_chat(bot, chat_id, chat_name, commands):
    scope = BotCommandScopeChat(chat_id=chat_id)
    await set_my_commands(bot, commands, scope)


async def setup_commands(bot):
    pass
    chat_id_1 = -1002011140937
    chat_name_1 = "Chat1"
    commands_chat1 = [
    BotCommand('report', 'üö´ –ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'),
   BotCommand('commands', 'üìñ –ö–æ–º–∞–Ω–¥—ã'),
   BotCommand('rules', 'üìù –ü—Ä–∞–≤–∏–ª–∞ —á–∞—Ç–∞'),
   BotCommand('grid', 'üóÇ –ß–∞—Ç—ã —Å–µ—Ç–∫–∏')
    ]
    await set_commands_for_chat(bot, chat_id_1, chat_name_1, commands_chat1)

    # Chat 2
    chat_id_2 = -1002129257694
    chat_name_2 = "Chat2"
    commands_chat2 = [
    BotCommand('commands', 'üìñ –ö–æ–º–∞–Ω–¥—ã'),
    BotCommand('rules', 'üìù –ü—Ä–∞–≤–∏–ª–∞ —á–∞—Ç–∞'),
    BotCommand('grid', 'üóÇ –ß–∞—Ç—ã —Å–µ—Ç–∫–∏'),
    BotCommand('addhelper', '‚úÖ –î–æ–±–∞–≤–∏—Ç—å—Å—è –≤ —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤'),
    BotCommand('unhelper', '‚ùå –£–¥–∞–ª–∏—Ç—å—Å—è –∏–∑ —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–æ–≤')
    ]
    await set_commands_for_chat(bot, chat_id_2, chat_name_2, commands_chat2)

# –°—Ç–∞—Ä—Ç
@dp.message_handler(commands=['start'])
async def handle_start(message: Message) -> None:
    if message.chat.type == 'private':
        user_id = message.from_user.id
        welcome_message = (
            f"üëã–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, [{message.from_user.first_name}](tg://user?id={user_id}).\n"
            "ü§ñ–Ø –±–æ—Ç –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Å–µ—Ç–∫–∏ —á–∞—Ç–æ–≤ ¬´·é†·è´·èí·é∑·èÜ·é¢·è´·èí·é©¬ª.\n"
            "üí°–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –∏–¥–µ–∏ –¥–ª—è –±–æ—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ [–≤ —ç—Ç–æ—Ç —á–∞—Ç](https://t.me/+LDPqIG1XW7dkNzgy)"
        )

        keyboard = InlineKeyboardMarkup()
        url_button = InlineKeyboardButton(text="–ö–æ–º–∞–Ω–¥—ã", url="https://teletype.in/@drmotory/commands_support")
        keyboard.add(url_button)

        await message.answer(welcome_message, parse_mode='Markdown', reply_markup=keyboard)


# –ø—Ä–∞–≤–∏–ª–∞

@dp.message_handler(
    lambda message: message.text.split()[0].strip().lower() in ['–ø—Ä–∞–≤–∏–ª–∞', '—Å–∞–ø –ø—Ä–∞–≤–∏–ª–∞', '.–ø—Ä–∞–≤–∏–ª–∞', '!–ø—Ä–∞–≤–∏–ª–∞',
                                                                '/rules@sapcmbot', '/rules', '/–ø—Ä–∞–≤–∏–ª–∞'])
async def send_rules(message: types.Message):
    rules_link = "https://teletype.in/@drmotory/psc"
    rules_message = f'[–ü—Ä–∞–≤–∏–ª–∞ —á–∞—Ç–∞]({rules_link})'
    await bot.send_message(message.chat.id, rules_message, parse_mode='markdown')


# –†–µ–ø–æ—Ä—Ç—ã
ADMIN_CHATS = [-1002129257694]
MUTE_DURATION = 3600
user_reports = {}


def get_report_content(message):
    if message.content_type == 'text':
        return message.text
    else:
        content_types = {
            'photo': '—Ñ–æ—Ç–æ',
            'video': '–≤–∏–¥–µ–æ',
            'animation': '–≥–∏—Ñ',
            'sticker': '—Å—Ç–∏–∫–µ—Ä'
        }
        return f"–ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∞ {content_types.get(message.content_type, '–∫–æ–Ω—Ç–µ–Ω—Ç')}"


@dp.message_handler(
    lambda message: message.text.split()[0].strip().lower() in ['—Ä–µ–ø–æ—Ä—Ç', '—Å–∞–ø —Ä–µ–ø–æ—Ä—Ç', '.—Ä–µ–ø–æ—Ä—Ç', '!—Ä–µ–ø–æ—Ä—Ç',
                                                                '/report@sapcmbot', '/report', '.–∂–∞–ª–æ–±–∞'])
async def handle_report(message: types.Message):
    if message.chat.type != 'supergroup':
        await message.answer('–†–µ–ø–æ—Ä—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç —Ç–æ–ª—å–∫–æ –≤ —á–∞—Ç–∞—Ö.')
        return

    try:
        user_id = message.from_user.id
        current_time = time.time()

        replied_message = message.reply_to_message
        command, _, report_text = message.text.partition('\n')



        if replied_message and report_text:
            report_content = get_report_content(replied_message)
            reported_user_link = f"[{replied_message.from_user.first_name}](tg://user?id={replied_message.from_user.id})"
            report_message = f'üõë–ù–æ–≤–∞—è –∂–∞–ª–æ–±–∞\nüìñ–ü—Ä–∏—á–∏–Ω–∞: {report_text}\nüìù–¢–µ–∫—Å—Ç: {report_content}\nüó£–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –∂–∞–ª–æ–±—ã: [{message.from_user.first_name}](tg://user?id={message.from_user.id})\nüë§–ñ–∞–ª–æ–±–∞ –∫–∏–Ω—É–ª–∏ –Ω–∞: {reported_user_link}'
            inline_keyboard = types.InlineKeyboardMarkup()
            goto_button = types.InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é",
                                                     url=f"https://t.me/{replied_message.chat.username}/{replied_message.message_id}")
            inline_keyboard.row(goto_button)

            for admin_chat_id in ADMIN_CHATS:
                await bot.send_message(admin_chat_id, report_message, parse_mode=types.ParseMode.MARKDOWN,
                                       reply_markup=inline_keyboard)
                await message.answer(f'‚úÖ –ñ–∞–ª–æ–±–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.\n–ü—Ä–∏—á–∏–Ω–∞:{report_text}')
        elif replied_message:
            report_content = get_report_content(replied_message)
            reported_user_link = f"[{replied_message.from_user.first_name}](tg://user?id={replied_message.from_user.id})"
            report_message = f'üõë–ù–æ–≤–∞—è –∂–∞–ª–æ–±–∞ –±–µ–∑ –ø—Ä–∏—á–∏–Ω—ã\nüìù–¢–µ–∫—Å—Ç: {report_content}\nüó£–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –∂–∞–ª–æ–±—ã: [{message.from_user.first_name}](tg://user?id={message.from_user.id})\nüë§–ñ–∞–ª–æ–±–∞ –∫–∏–Ω—É–ª–∏ –Ω–∞: {reported_user_link}'
            inline_keyboard = types.InlineKeyboardMarkup()
            goto_button = types.InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é",
                                                     url=f"https://t.me/{replied_message.chat.username}/{replied_message.message_id}")
            inline_keyboard.row(goto_button)

            for admin_chat_id in ADMIN_CHATS:
                await bot.send_message(admin_chat_id, report_message, parse_mode=types.ParseMode.MARKDOWN,
                                       reply_markup=inline_keyboard)
                await message.answer('‚úÖ –ñ–∞–ª–æ–±–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.')
        else:
            await message.answer(
                '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞—à—É –∂–∞–ª–æ–±—É. –£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –∏ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ –∂–∞–ª–æ–±—É.')
    except Exception as e:
        await message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–π –∂–∞–ª–æ–±—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.')


@dp.message_handler(lambda message: message.text.split()[0].strip().lower() in ['—á–µ–∫', '—Å–∞–ø —á–µ–∫', '—á–µ–∫.'] and str(message.chat.id) == '-1002129257694')
async def check_report(message: types.Message):
    await message.reply('üåü')
    profile_link = f"tg://user?id={message.from_user.id}"
    await message.reply('[{}]({}) –ø—Ä–æ–≤–µ—Ä–∏–ª —Ä–µ–ø–æ—Ä—Ç—ã, —Å–ø–∞—Å–∏–±–æ!'.format(message.from_user.full_name, profile_link), parse_mode='Markdown')


    


# –ö–æ–º–∞–Ω–¥—ã

@dp.message_handler(
    lambda message: message.text.split()[0].strip().lower() in ['–∫–æ–º–∞–Ω–¥—ã', '—Å–∞–ø –∫–æ–º–∞–Ω–¥—ã', '.–∫–æ–º–∞–Ω–¥—ã', '!–∫–æ–º–∞–Ω–¥—ã',
                                                                '/commands@sapcmbot', '/commands', '/–∫–æ–º–∞–Ω–¥—ã'])
async def send_commands(message: types.Message):
    commands_link = "https://teletype.in/@drmotory/support_commands"
    rules_message = f'[–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞]({commands_link})'
    await bot.send_message(message.chat.id, rules_message, parse_mode='markdown')


# –ó–∞–∫—Ä–µ–ø–ª—ë–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–∞—Ö
allowed_users = ['6282374712']



@dp.message_handler(lambda message: message.text.strip().lower() == '!–¥–æ—Ä–ø–∏–Ω')
async def send_and_pin_messages(message: types.Message):
    allowed_users = ['6282374712']
    if str(message.from_user.id) in allowed_users:
        messages_to_send = [
            "[üëã](https://teletype.in/@drmotory/collective-2)–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ¬´[ü¶¶·é†·è´·èí·é∑·èÜ·é¢·è´·èí·é© | —á–∞—Ç –¥–ª—è –æ–±—â–µ–Ω–∏—è](https://t.me/drmitory)¬ª.\n–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –Ω–∞–π—Ç–∏ —Å–µ–±–µ –Ω–æ–≤—ã—Ö –∑–Ω–∞–∫–æ–º—ã—Ö, –¥—Ä—É–∑–µ–π –∏ –º–æ–∂–µ—Ç –¥–∞–∂–µ –ø–∞—Ä—É!\n\n–û—á–µ–Ω—å –Ω–∞–¥–µ–µ–º—Å—è —á—Ç–æ –≤–∞–º —É –Ω–∞—Å –ø–æ–Ω—Ä–∞–≤–∏—Ç—Å—è. –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –≤–ª–∏—Ç—å—Å—è –≤ –∫–æ–ª–ª–µ–∫—Ç–∏–≤ —Ç–æ –Ω–µ –Ω–∞–¥–æ –º–æ–ª—á–∞—Ç—å, –∞ –Ω—É–∂–Ω–æ –ø–∏—Å–∞—Ç—å –∏ –æ–±—â–∞—Ç—å—Å—è —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ —á–∞—Ç–∞.\n\n[ü´Ç –ö–∞–∫ –≤–ª–∏—Ç—å—Å—è –≤ –∫–æ–ª–ª–µ–∫—Ç–∏–≤](https://teletype.in/@drmotory/collective-2)\n\n‚ÑπÔ∏è –ú—ã —Ö–æ—Ç–∏–º —Å–æ–∑–¥–∞—Ç—å –ø—Ä–∏—è—Ç–Ω—É—é –∞—Ç–º–æ—Å—Ñ–µ—Ä—É –≤ —á–∞—Ç–µ. –ï—Å–ª–∏ –≤–∞—Å —á–µ–ª–æ–≤–µ–∫ –ø–æ–ø—Ä–æ—Å–∏–ª –Ω–µ —Ç–µ–≥–∞—Ç—å / –æ—Ç–≤–µ—á–∞—Ç—å –µ–º—É –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è, —Ç–æ –Ω–µ —Å—Ç–æ–∏—Ç —ç—Ç–æ–≥–æ –¥–µ–ª–∞—Ç—å, –≤–µ–¥—å –∑–∞ —ç—Ç–æ –≤–∞–º –≤—ã–¥–∞–¥—É—Ç –º—É—Ç.\n\n–í—Å–µ –Ω–∞—à–∏ —á–∞—Ç—ã:\n[ü¶¶·é†·è´·èí·é∑·èÜ·é¢·è´·èí·é© | —á–∞—Ç –¥–ª—è –æ–±—â–µ–Ω–∏—è](https://t.me/drmotory)\n[üéÆ·é†·è´·èí·é∑·è¢·è´·èí·é© | –ò–≥—Ä—ã](https://t.me/drmitory_play)\n\n–ü–µ—Ä–µ–¥ —Ç–µ–º –∫–∞–∫ –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ —á–∞—Ç–∞.\n–ü—Ä–∞–≤–∏–ª–∞ —á–∞—Ç–æ–≤ —Å–µ—Ç–∫–∏ ¬´·é†·è´·èí·é∑·èÜ·é¢·è´·èí·é©¬ªüîΩ",
            "[–ü—Ä–∞–≤–∏–ª–∞ —Å–µ—Ç–∫–∏ —á–∞—Ç–æ–≤ ¬´·é†·è´·èí·é∑·èÜ·é¢·è´·èí·é©¬ª](https://teletype.in/@drmotory/psc)\n[–ü—Ä–∞–≤–∏–ª–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —á–∞—Ç–∞](https://teletype.in/@drmotory/chatrules#Cgz9)\n‚ùóÔ∏è –ê–¥–º–∏–Ω—ã –∏ –º–æ–¥–µ—Ä—ã –≤–ø—Ä–∞–≤–µ –≤—ã–¥–∞—Ç—å —Ç–µ –Ω–∞–∫–∞–∑–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ—Å—á–∏—Ç–∞—é—Ç –Ω—É–∂–Ω—ã–º.",
            "–ï—Å–ª–∏ –≤—ã –∑–∞–º–µ—Ç–∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–≤–µ–¥–µ–Ω–∏–µ–º –¥—Ä—É–≥–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º –∏–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º —á–∞—Ç–∞ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã.\n\n–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è üå∫"
        ]

        sent_messages = []
        for text in messages_to_send:
            sent_message = await bot.send_message(message.chat.id, text, parse_mode="Markdown")
            sent_messages.append(sent_message)

        await bot.pin_chat_message(message.chat.id, sent_messages[0].message_id)


@dp.message_handler(lambda message: message.text.strip().lower() == '!–ø–ª–ø–∏–Ω')
async def send_and_pin_messages(message: types.Message):
    if str(message.from_user.id) in allowed_users:
        messages_to_send = [
            "[üëã](https://teletype.in/@drmotory/chatrules)–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ¬´[üéÆ·é†·è´·èí·é∑·èÜ·é¢·è´·èí·é© | –ò–≥—Ä—ã](https://t.me/drmitory_play)¬ª\n–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –ø–æ–∏–≥—Ä–∞—Ç—å –≤ –∏–≥—Ä—ã,–ø—Ä–∏ —ç—Ç–æ–º –Ω–µ –∑–∞—Å–æ—Ä—è—è –æ—Å–Ω–æ–≤–Ω–æ–π —á–∞—Ç.\n\n–ú—ã —Å–æ–±—Ä–∞–ª–∏ —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –±–æ—Ç–æ–≤ –¥–ª—è –∏–≥—Ä,–∏ –≥–æ—Ç–æ–≤—ã –¥–∞—Ç—å –≤–∞–º —Å—ã–≥—Ä–∞—Ç—å –≤–æ –º–Ω–æ–≥–∏–µ –∏–≥—Ä—ã!\n–ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Ç–æ –æ—Ç–º–µ—Ç—å—Ç–µ –∫–æ–≥–æ –∏–∑ –∞–¥–º–∏–Ω–æ–≤ –∏ –Ω–∞–ø–∏—à–∏—Ç–µ –∏–º—è –±–æ—Ç–∞ –∏ —á—Ç–æ –æ–Ω –¥–µ–ª–∞–µ—Ç,–∞ —Ç–∞–º –∞–¥–º–∏–Ω—ã —Ä–µ—à–∞—Ç,–¥–æ–±–∞–≤–ª—è—Ç—å –∏–ª–∏ –Ω–µ—Ç.\n\n–æ—Å–Ω–æ–≤–Ω–æ–π —á–∞—Ç –¥–ª—è [–æ–±—â–µ–Ω–∏—è](https://t.me/drmitory),–≥–¥–µ –º–æ–∂–Ω–æ –ø–æ–æ–±—â–∞—Ç—å—Å—è –±–µ–∑ –∏–≥—Ä–æ–≤—ã—Ö –±–æ—Ç–æ–≤.\n‚ÄºÔ∏è–ü–µ—Ä–µ–¥ —Ç–µ–º –∫–∞–∫ –Ω–∞—á–∞—Ç—å –æ–±—â–∞—Ç—å—Å—è,–ø—Ä–æ—á–∏—Ç–∞–π—Ç–µ [–ø—Ä–∞–≤–∏–ª–∞ —Å–µ—Ç–∫–∏.](https://teletype.in/@drmotory/psc)\n[ü´Ç–ì–∞–π–¥ –∫–∞–∫ –≤–ª–∏—Ç—å—Å—è –≤ –∫–æ–ª–ª–µ–∫—Ç–∏–≤](https://teletype.in/@drmotory/collective-2)\n\n–í—Å–µ –Ω–∞—à–∏ —á–∞—Ç—ã:\n[ü¶¶·é†·è´·èí·é∑·èÜ·é¢·è´·èí·é© | —á–∞—Ç –¥–ª—è –æ–±—â–µ–Ω–∏—è](https://t.me/drmitory)\n[üéÆ·é†·è´·èí·é∑·èÜ·é¢·è´·èí·é© | –ò–≥—Ä—ã](https://t.me/drmitory_play)",
            "–ï—Å–ª–∏ –≤—ã –∑–∞–º–µ—Ç–∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–≤–µ–¥–µ–Ω–∏–µ–º –¥—Ä—É–≥–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º –∏–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º —á–∞—Ç–∞ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã.\n\n–ü—Ä–∏—è—Ç–Ω—ã—Ö –∏–≥—Äüå∫"
        ]

        sent_messages = []
        for text in messages_to_send:
            sent_message = await bot.send_message(message.chat.id, text, parse_mode="Markdown")
            sent_messages.append(sent_message)

        await bot.pin_chat_message(message.chat.id, sent_messages[0].message_id)


# –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–æ–≤:
@dp.message_handler(lambda message: message.text.split()[0].strip().lower() in ['+–ø–∏–Ω', '—Å–∞–ø –ø–∏–Ω'])
async def pin_message(message: Message):
    try:
        chat_admins = await bot.get_chat_administrators(message.chat.id)  

        is_admin = False
        is_admin_can_pin = False
        for admin in chat_admins:
            if admin.user.id == message.from_user.id:
                is_admin = True
                if admin.can_pin_messages:
                    is_admin_can_pin = True
                break



        if is_admin and is_admin_can_pin:
            if message.reply_to_message:
                await bot.pin_chat_message(message.chat.id, message.reply_to_message.message_id)
                reply_message = await bot.send_message(message.chat.id,
                                                       f"üìå [–°–æ–æ–±—â–µ–Ω–∏–µ](https://t.me/{(await bot.get_chat(chat_id=message.chat.id)).username}/{message.reply_to_message.message_id}) –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–æ.",
                                                       parse_mode="Markdown")
            else:
                await message.reply("–ß—Ç–æ–±—ã –∑–∞–∫—Ä–µ–ø–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –Ω–µ–≥–æ –∫–æ–º–∞–Ω–¥–æ–π '+–ø–∏–Ω'.",
                                    parse_mode=types.ParseMode.MARKDOWN)
        else:
            await message.reply("üîí –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π",
                                parse_mode=types.ParseMode.MARKDOWN)
    except Exception as e:
        await message.reply("üö´ –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π", parse_mode=types.ParseMode.MARKDOWN)


@dp.message_handler(lambda message: message.text.split()[0].strip().lower() in ['-–ø–∏–Ω', '—Å–∞–ø –∞–Ω–ø–∏–Ω'])
async def unpin_message(message: Message):
    try:
        chat_admins = await bot.get_chat_administrators(message.chat.id)  

        is_admin = False
        for admin in chat_admins:
            if admin.user.id == message.from_user.id:
                is_admin = True
                break

        if is_admin:
            if message.reply_to_message:
                await bot.unpin_chat_message(message.chat.id)
                await message.reply("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–∫—Ä–µ–ø–ª–µ–Ω–æ.", parse_mode=types.ParseMode.MARKDOWN)
            else:
                await message.reply("–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–∫—Ä–µ–ø–ª–µ–Ω–∏—è.", parse_mode=types.ParseMode.MARKDOWN)
        else:
            await message.reply("üîí –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –æ—Ç–∫—Ä–µ–ø–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π.",
                                parse_mode=types.ParseMode.MARKDOWN)
    except Exception as e:
        await message.reply("üö´ –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –æ—Ç–∫—Ä–µ–ø–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π", parse_mode=types.ParseMode.MARKDOWN)

        # –ú—É—Ç—ã:


async def user_can_restrict_members(user_id, chat_id):
    try:
        chat_member = await bot.get_chat_member(chat_id, user_id)

        if chat_member.status in ['administrator', 'creator']:
            if chat_member.status == 'creator':
                return True
            else:
                chat_permissions = chat_member.chat_permissions
                if 'can_restrict_members' in chat_permissions:
                    return True
    except Exception as e:
        print(f"Error in user_can_restrict_members: {e}")

    return False


@dp.message_handler(lambda message: message.text.split()[0].strip().lower() in ['+–º—É—Ç', '—Å–∞–ø –º—É—Ç'])
async def process_mute_duration(message: types.Message):
    if await user_can_restrict_members(message.from_user.id, message.chat.id):
        try:
            duration_str = message.text.split('+–º—É—Ç ')[1]
            user = message.reply_to_message.from_user

            duration_val = int(duration_str[:-1])
            duration_unit = duration_str[-1]
            duration = 0

            if duration_unit == '–º':
                duration = duration_val * 60
            elif duration_unit == '—á':
                duration = duration_val * 60 * 60
            elif duration_unit == '–¥':
                duration = duration_val * 60 * 60 * 24

            until_date = int((datetime.now() + timedelta(seconds=duration)).timestamp())



            await bot.restrict_chat_member(message.chat.id, user.id, until_date=until_date,
                                           permissions=types.ChatPermissions())
            admin_link = f"[{message.from_user.first_name}](tg://user?id={message.from_user.id})"
            user_link = f"[{user.first_name}](tg://user?id={user.id})"
            await message.answer(f"üîá –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_link} –∑–∞–º—É—á–µ–Ω.\nüò∫ –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä: {admin_link}",
                                 parse_mode="Markdown")
        except Exception as e:
            await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–¥–∞—á—É –º—É—Ç–∞.", parse_mode="Markdown")


@dp.message_handler(lambda message: message.text.split()[0].strip().lower() in ['-–º—É—Ç', '—Å–∞–ø —Ä–∞–∑–º—É—Ç'])
async def unmute(message: types.Message):
    if await user_can_restrict_members(message.from_user.id, message.chat.id):
        try:
            user_id = message.reply_to_message.from_user.id
            user = message.reply_to_message.from_user
            await bot.restrict_chat_member(message.chat.id, user_id,
                                           permissions=types.ChatPermissions(can_send_messages=True,
                                                                             can_send_media_messages=True,
                                                                             can_send_other_messages=True,
                                                                             can_add_web_page_previews=True))
            admin_link = f"[{message.from_user.first_name}](tg://user?id={message.from_user.id})"
            user_link = f"[{user.first_name}](tg://user?id={user_id})"
            await message.answer(f"üîä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_link} —Ä–∞–∑–º—É—á–µ–Ω.\nüò∫ –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä: {admin_link}",
                                 parse_mode="Markdown")
        except Exception as e:
            await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —Ä–∞–∑–º—É—Ç.", parse_mode="Markdown")

        # –ë–∞–Ω:


@dp.message_handler(lambda message: message.text.split()[0].strip().lower() in ['+–±–∞–Ω', '—Å–∞–ø –±–∞–Ω'])
async def ban_reply_user(message: types.Message):
    if await user_can_restrict_members(message.from_user.id, message.chat.id) and message.reply_to_message:
        try:
            if len(message.text.split()) <= 1:
                await message.answer("–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –∏ —Ñ–æ—Ä–º–∞—Ç (–º/—á/–¥) –¥–ª—è –±–∞–Ω–∞. –ù–∞–ø—Ä–∏–º–µ—Ä, '+–±–∞–Ω 30–¥'.")
                return

            ban_params = message.text.split()[1]
            duration_val = int(re.search(r'\d+', ban_params).group())
            duration_unit = re.search(r'[–º—á–¥]', ban_params).group()

            user_id = message.reply_to_message.from_user.id
            user = message.reply_to_message.from_user

            duration_seconds = 0
            if duration_unit == '–º':
                duration_seconds = duration_val * 60
            elif duration_unit == '—á':
                duration_seconds = duration_val * 60 * 60
            elif duration_unit == '–¥':
                duration_seconds = duration_val * 60 * 60 * 24

            until_date = int(datetime.now().timestamp()) + duration_seconds
            await bot.kick_chat_member(message.chat.id, user_id, until_date=until_date)

            admin_link = f"[{message.from_user.first_name}](tg://user?id={message.from_user.id})"
            user_link = f"[{user.first_name}](tg://user?id={user_id})"
            await message.answer(
                f"üïí –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_link} –∑–∞–±–∞–Ω–µ–Ω –Ω–∞ {duration_val} {duration_unit}.\nüò∫ –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä: {admin_link}",
                parse_mode="Markdown")
        except Exception as e:
            await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–¥–∞—á—É –±–∞–Ω–∞ –∏–ª–∏ —ç—Ç–æ –Ω–µ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.", parse_mode="Markdown")



# –î–û–°–¢–£–ü–ù–û –í–°–ï–ú:
# –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞
@dp.message_handler(
    lambda message: message.text.split()[0].strip().lower() in ['–ø–∏—É', '—Å–∞–ø –ø–∏—É', '.–ø–∏—É', '!–ø–∏—É', '/–ø–∏—É', '?–ø–∏—É'])
async def ping(message: types.Message):
    start_time = time.time()
    sent = await message.answer('–ü–æ–¥—Å—á–µ—Ç...')
    end_time = time.time()
    processing_time = round((end_time - start_time) * 1000, 2)
    current_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    await bot.edit_message_text(f'üî´–ü–ê–£!\nüöÄ–°–∫–æ—Ä–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞ {processing_time} –º—Å', message.chat.id, sent.message_id)


@dp.message_handler(
    lambda message: message.text.split()[0].strip().lower() in ['–ø–∏–Ω–≥', '—Å–∞–ø –ø–∏–Ω–≥', '.–ø–∏–Ω–≥', '!–ø–∏–Ω–≥', '/–ø–∏–Ω–≥', '?–ø–∏–Ω–≥'])
async def ping(message: types.Message):
    start_time = time.time()
    sent = await message.answer('–ü–æ–¥—Å—á–µ—Ç...')
    end_time = time.time()
    processing_time = round((end_time - start_time) * 1000, 2)
    current_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    await bot.edit_message_text(f'üèì–ü–û–ù–ì!\nüöÄ–°–∫–æ—Ä–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞ {processing_time} –º—Å', message.chat.id, sent.message_id)


@dp.message_handler(
    lambda message: message.text.split()[0].strip().lower() in ['—Å–∞–ø', '—Å–∞–ø —Å–∞–ø', '.—Å–∞–ø', '!—Å–∞–ø', '/—Å–∞–ø', '?—Å–∞–ø'])
async def ping(message: types.Message):
    start_time = time.time()
    sent = await message.answer('–ü–æ–¥—Å—á–µ—Ç...')
    end_time = time.time()
    processing_time = round((end_time - start_time) * 1000, 2)
    current_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    await bot.edit_message_text(f'üëãWUSAP\nüöÄ–°–∫–æ—Ä–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞ {processing_time} –º—Å', message.chat.id, sent.message_id)


# –°–µ—Ç–∫–∞ —á–∞—Ç–æ–≤
@dp.message_handler(
    lambda message: message.text.split()[0].strip().lower() in ['—Å–µ—Ç–∫–∞', '—Å–∞–ø —Å–µ—Ç–∫–∞', '.—Å–µ—Ç–∫–∞', '!—Å–µ—Ç–∫–∞',
                                                                '/grid@sapcmbot', '/grid'])
async def send_chat_grid(message: types.Message):
    chat_grid_message = "üìñ–í—Å–µ —á–∞—Ç—ã —Å–µ—Ç–∫–∏:"
    markup = types.InlineKeyboardMarkup()
    button1 = types.InlineKeyboardButton(text="ü¶¶·é†·è´·èí·é∑·èÜ·é¢·è´·èí·é© | —á–∞—Ç–∏–∫", url="https://t.me/drmitory")
    button2 = types.InlineKeyboardButton(text="–ß–∞—Ç –∑–∞–∫—Ä—ã—Ç", url="https://t.me/drmitory_play")
    markup.add(button1, button2)
    await bot.send_message(message.chat.id, chat_grid_message, reply_markup=markup)


# –°–ø–æ—Ç–∏
SPOTIFY_CLIENT_ID = '4d142088786c487eac0f901facb86ea9'
SPOTIFY_CLIENT_SECRET = 'bb56bdb3a0d34515905d15f23bf8cd4c'

command_count = {}
command_timestamps = {}


@dp.message_handler(
    lambda message: message.text.split()[0].strip().lower() in ['—Å–ø–æ—Ç–∏', '—Å–∞–ø —Å–ø–æ—Ç–∏', '.—Å–ø–æ—Ç–∏', '!—Å–ø–æ—Ç–∏'])
async def music_command(message: types.Message):
    chat_id = message.chat.id

    if chat_id not in command_count:
        command_count[chat_id] = 0
        command_timestamps[chat_id] = []

    current_time = time.time()
    command_timestamps[chat_id] = [timestamp for timestamp in command_timestamps[chat_id] if
                                   timestamp > current_time - 60]

    if len(command_timestamps[chat_id]) > 5:
        await bot.send_message(chat_id, "–ö–æ–º–∞–Ω–¥–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –Ω–∞ 10 –º–∏–Ω—É—Ç –∏–∑-–∑–∞ —á–∞—Å—Ç–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.")
        return

    command_timestamps[chat_id].append(time.time())
    command_count[chat_id] += 1

    msg = await bot.send_message(chat_id, "–ò—â—É —Ç—Ä–µ–∫...")

    try:
        query = message.text.split(' ', 1)[1]
        track = find_track(query)
        if track:
            await bot.delete_message(chat_id, msg.message_id)
            audio_file = download_audio(track['preview_url'])
            audio = open(audio_file, 'rb')
            response_msg = await bot.send_audio(chat_id, audio, title="—Ç—Ä–µ–∫: " + track['name'])
            audio.close()
            os.remove(audio_file)
        else:
            await bot.delete_message(chat_id, msg.message_id)
            await bot.send_message(chat_id, "–¢—Ä–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
    except Exception as e:
        await bot.send_message(chat_id,
                               f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}. –ü–æ–∂–∞–ª—É–π—Ç–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")



def find_track(query):
    try:
        sp = spotipy.Spotify(client_credentials_manager=SpotifyClientCredentials(client_id=SPOTIFY_CLIENT_ID,
                                                                                 client_secret=SPOTIFY_CLIENT_SECRET))
        results = sp.search(q='track:' + query, type='track')
        if results and 'tracks' in results and 'items' in results['tracks'] and results['tracks']['items']:
            return results['tracks']['items'][0]
        else:
            return None
    except Exception as e:
        print(f"Error finding track: {str(e)}")
        return None


def download_audio(url):
    response = requests.get(url)
    file_name = 'temp_audio.mp3'
    with open(file_name, 'wb') as f:
        f.write(response.content)
    return file_name


# –°—Å–æ—Ä—ã
@dp.message_handler(
    lambda message: message.text.split()[0].strip().lower() in ['—Å—Å–æ—Ä—ã', '—Å–∞–ø —Å—Å–æ—Ä—ã', '.—Å—Å–æ—Ä—ã', '!—Å—Å–æ—Ä—ã', '/—Å—Å–æ—Ä—ã'])
async def handle_quarrel(message: Message):
    if message.reply_to_message:
        user_id = message.reply_to_message.from_user.id
        user_name = message.reply_to_message.from_user.first_name
        mention = f"<a href='tg://user?id={user_id}'>{user_name}</a>"
        warning_message = f"‚õîÔ∏è<b>–í–Ω–∏–º–∞–Ω–∏–µ!</b> –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è {mention} –∏ –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö. –°—Å–æ—Ä—ã –≤ —á–∞—Ç–∞—Ö —Å–µ—Ç–∫–∏ ¬´·é†·è´·èí·é∑·èÜ·é¢·è´·èí·é©¬ª –∑–∞–ø—Ä–µ—â–µ–Ω—ã.n—Å–æ–≤–µ—Ç—É–µ–º –ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å —Å—Å–æ—Ä–∏—Ç—å—Å—è, –∏–Ω–∞—á–µ –º—ã –±—É–¥–µ–º –≤—ã–Ω—É–∂–¥–µ–Ω—ã –∑–∞–≥–ª—É—à–∏—Ç—å –≤–∞—Å.\n\nü§ì<i>–°—Å–æ—Ä–∞</i> - —ç—Ç–æ –∫–æ–Ω—Ñ–ª–∏–∫—Ç –∏–ª–∏ —Ä–∞–∑–Ω–æ–≥–ª–∞—Å–∏–µ –º–µ–∂–¥—É –ª—é–¥—å–º–∏, –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è–º–∏ –∏–ª–∏ –≥—Ä—É–ø–ø–∞–º–∏, –∫–æ—Ç–æ—Ä–æ–µ —á–∞—Å—Ç–æ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞–µ—Ç—Å—è —Å–ª–æ–≤–µ—Å–Ω—ã–º–∏ –≤—ã—è—Å–Ω–µ–Ω–∏—è–º–∏, –Ω–∞–ø—Ä—è–∂–µ–Ω–Ω–æ—Å—Ç—å—é –∏ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–º–∏ —ç–º–æ—Ü–∏—è–º–∏.\n\nüìõ–ó–∞ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –∞–¥–º–∏–Ω—ã –∏–º–µ—é—Ç –ø–æ–ª–Ω–æ–µ –ø—Ä–∞–≤–æ –≤—ã–¥–∞—Ç—å –Ω–∞–∫–∞–∑–∞–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –ø–æ—Å—á–∏—Ç–∞—é—Ç –Ω—É–∂–Ω—ã–º."
        keyboard = types.InlineKeyboardMarkup()
        url_button1 = types.InlineKeyboardButton(text="–ü—Ä–∞–≤–∏–ª–∞ —Å–µ—Ç–∫–∏", url="https://teletype.in/@drmotory/chatrules")
        url_button2 = types.InlineKeyboardButton(text="–ú–æ–π —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥",
                                                 url="https://teletype.in/@drmotory/commands_support")
        keyboard.add(url_button1, url_button2)

        await message.reply(warning_message, reply=False, reply_markup=keyboard, parse_mode='HTML')
    else:
        warning_message = "‚õîÔ∏è<b>–í–Ω–∏–º–∞–Ω–∏–µ!</b> –°—Å–æ—Ä—ã –≤ —á–∞—Ç–∞—Ö —Å–µ—Ç–∫–∏ ¬´·é†·è´·èí·é∑·èÜ·é¢·è´·èí·é©¬ª –∑–∞–ø—Ä–µ—â–µ–Ω—ã.n—Å–æ–≤–µ—Ç—É–µ–º –ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å —Å—Å–æ—Ä–∏—Ç—å—Å—è, –∏–Ω–∞—á–µ –º—ã –±—É–¥–µ–º –≤—ã–Ω—É–∂–¥–µ–Ω—ã –∑–∞–≥–ª—É—à–∏—Ç—å –≤–∞—Å.\n\nü§ì<i>–°—Å–æ—Ä–∞</i> - —ç—Ç–æ –∫–æ–Ω—Ñ–ª–∏–∫—Ç –∏–ª–∏ —Ä–∞–∑–Ω–æ–≥–ª–∞—Å–∏–µ –º–µ–∂–¥—É –ª—é–¥—å–º–∏, –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è–º–∏ –∏–ª–∏ –≥—Ä—É–ø–ø–∞–º–∏, –∫–æ—Ç–æ—Ä–æ–µ —á–∞—Å—Ç–æ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞–µ—Ç—Å—è —Å–ª–æ–≤–µ—Å–Ω—ã–º–∏ –≤—ã—è—Å–Ω–µ–Ω–∏—è–º–∏, –Ω–∞–ø—Ä—è–∂–µ–Ω–Ω–æ—Å—Ç—å—é –∏ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–º–∏ —ç–º–æ—Ü–∏—è–º–∏.\n\nüìõ–ó–∞ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –∞–¥–º–∏–Ω—ã –∏–º–µ—é—Ç –ø–æ–ª–Ω–æ–µ –ø—Ä–∞–≤–æ –≤—ã–¥–∞—Ç—å –Ω–∞–∫–∞–∑–∞–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –ø–æ—Å—á–∏—Ç–∞—é—Ç –Ω—É–∂–Ω—ã–º."

        keyboard = types.InlineKeyboardMarkup()
        url_button1 = types.InlineKeyboardButton(text="–ü—Ä–∞–≤–∏–ª–∞ —Å–µ—Ç–∫–∏", url="https://teletype.in/@drmotory/chatrules")
        url_button2 = types.InlineKeyboardButton(text="–ú–æ–π —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥",
                                                 url="https://teletype.in/@drmotory/commands_support")
        keyboard.add(url_button1, url_button2)

        await message.reply(warning_message, reply=False, reply_markup=keyboard, parse_mode='HTML')


# –ê–≥—Ä–µ—Å—Å–∏—è
@dp.message_handler(
    lambda message: message.text.split()[0].strip().lower() in ['–∞–≥—Ä–µ—Å—Å–∏—è', '—Å–∞–ø –∞–≥—Ä–µ—Å—Å–∏—è', '.–∞–≥—Ä–µ—Å—Å–∏—è', '!–∞–≥—Ä–µ—Å—Å–∏—è', '/–∞–≥—Ä–µ—Å—Å–∏—è'])
async def handle_aggression(message: Message):
    if message.reply_to_message:
        user_id = message.reply_to_message.from_user.id
        user_name = message.reply_to_message.from_user.first_name
        mention = f"<a href='tg://user?id={user_id}'>{user_name}</a>"
        warning_message = f"‚õîÔ∏è<b>–í–Ω–∏–º–∞–Ω–∏–µ! –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è {mention} –∏ –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö. –ê–≥—Ä–µ—Å—Å–∏—è –≤ —á–∞—Ç–∞—Ö —Å–µ—Ç–∫–∏ ¬´·é†·è´·èí·é∑·èÜ·é¢·è´·èí·é©¬ª –∑–∞–ø—Ä–µ—â–µ–Ω–∞.</b>n–°–æ–≤–µ—Ç—É–µ–º –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç –∞–≥—Ä–µ—Å—Å–∏–∏ –≤ –Ω–∞—à–∏—Ö —á–∞—Ç–∞—Ö.nü§ì<i>–ê–≥—Ä–µ—Å—Å–∏—è</i> ‚Äî —ç—Ç–æ –ø–æ–≤–µ–¥–µ–Ω–∏–µ, –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –Ω–∞ –ø—Ä–∏—á–∏–Ω–µ–Ω–∏–µ –≤—Ä–µ–¥–∞ –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º –¥—Ä—É–≥–æ–º—É —á–µ–ª–æ–≤–µ–∫—Énüìõ–ó–∞ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –∞–¥–º–∏–Ω—ã –∏–º–µ—é—Ç –ø–æ–ª–Ω–æ–µ –ø—Ä–∞–≤–æ –≤—ã–¥–∞—Ç—å –Ω–∞–∫–∞–∑–∞–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –ø–æ—Å—á–∏—Ç–∞—é—Ç –Ω—É–∂–Ω—ã–º."



        keyboard = types.InlineKeyboardMarkup()
        url_button1 = types.InlineKeyboardButton(text="–ü—Ä–∞–≤–∏–ª–∞ —Å–µ—Ç–∫–∏", url="https://teletype.in/@drmotory/chatrules")
        url_button2 = types.InlineKeyboardButton(text="–ú–æ–π —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥",
                                                 url="https://teletype.in/@drmotory/commands_support")
        keyboard.add(url_button1, url_button2)

        await message.reply(warning_message, reply=False, reply_markup=keyboard, parse_mode='HTML')
    else:
        warning_message = "‚õîÔ∏è<b>–í–Ω–∏–º–∞–Ω–∏–µ! –ê–≥—Ä–µ—Å—Å–∏—è –≤ —á–∞—Ç–∞—Ö —Å–µ—Ç–∫–∏ ¬´·é†·è´·èí·é∑·èÜ·é¢·è´·èí·é©¬ª –∑–∞–ø—Ä–µ—â–µ–Ω–∞.</b>\n–°–æ–≤–µ—Ç—É–µ–º –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç –∞–≥—Ä–µ—Å—Å–∏–∏ –≤ –Ω–∞—à–∏—Ö —á–∞—Ç–∞—Ö.\n\nü§ì<i>–ê–≥—Ä–µ—Å—Å–∏—è</i> ‚Äî —ç—Ç–æ –ø–æ–≤–µ–¥–µ–Ω–∏–µ, –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –Ω–∞ –ø—Ä–∏—á–∏–Ω–µ–Ω–∏–µ –≤—Ä–µ–¥–∞ –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º –¥—Ä—É–≥–æ–º—É —á–µ–ª–æ–≤–µ–∫—É.\n\nüìõ–ó–∞ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –∞–¥–º–∏–Ω—ã –∏–º–µ—é—Ç –ø–æ–ª–Ω–æ–µ –ø—Ä–∞–≤–æ –≤—ã–¥–∞—Ç—å –Ω–∞–∫–∞–∑–∞–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –ø–æ—Å—á–∏—Ç–∞—é—Ç –Ω—É–∂–Ω—ã–º."

        keyboard = types.InlineKeyboardMarkup()
        url_button1 = types.InlineKeyboardButton(text="–ü—Ä–∞–≤–∏–ª–∞ —Å–µ—Ç–∫–∏", url="https://teletype.in/@drmotory/chatrules")
        url_button2 = types.InlineKeyboardButton(text="–ú–æ–π —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥",
                                                 url="https://teletype.in/@drmotory/commands_support")
        keyboard.add(url_button1, url_button2)

        await message.reply(warning_message, reply=False, reply_markup=keyboard, parse_mode='HTML')


# –í–∏–∫–∏
wiki_wiki = wikipediaapi.Wikipedia(
    language='ru',
    extract_format=wikipediaapi.ExtractFormat.WIKI,
    user_agent='wikipedia')


@dp.message_handler(lambda message: message.text.split()[0].strip().lower() in ['–≤–∏–∫–∏', '—Å–∞–ø –≤–∏–∫–∏', '.–≤–∏–∫–∏', '!–≤–∏–∫–∏'])
async def wiki_search(message: types.Message):
    query = message.text[5:].strip()
    page = wiki_wiki.page(query)
    if page.exists():
        summary = page.summary[:1500]
        await message.reply(summary)
    else:
        await message.reply("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å.")


# –°–ª–æ–≤–∞—Ä—å
@dp.message_handler(
    lambda message: message.text.split()[0].strip().lower() in ['—Å–ª–æ–≤–∞—Ä—å', '—Å–∞–ø —Å–ª–æ–≤–∞—Ä—å', '.—Å–ª–æ–≤–∞—Ä—å', '!—Å–ª–æ–≤–∞—Ä—å'])
async def define_word(message: types.Message):
    command_parts = message.text.split(' ')
    if len(command_parts) > 1:
        word = command_parts[1]
        response = requests.get(
            f'https://dictionary.yandex.net/api/v1/dicservice.json/lookup?key=dict.1.1.20240101T213553Z.26e7fed62e078769.7468573f9cdcb622ca5087c8a063fc37b904dfde&lang=ru-ru&text={word}')

        if response.status_code == 200:
            data = response.json()
            if 'def' in data and data['def']:
                meanings = data['def'][0]['tr']
                response_message = f"üìñ –ü–æ—è—Å–Ω–µ–Ω–∏–µ —Å–ª–æ–≤–∞ {word}\n"
                for index, meaning in enumerate(meanings, start=1):
                    response_message += f"{index}‚É£ {meaning['text']}\n"
                await message.reply(response_message)
            else:
                await message.reply(f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–ª—è —Å–ª–æ–≤–∞ '{word}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        else:
            await message.reply("–ò–∑–≤–∏–Ω–∏, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
    else:
        await message.reply("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É '—Å–ª–æ–≤–∞—Ä—å' —Å —É–∫–∞–∑–∞–Ω–∏–µ–º —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞.")


# –†–µ—à–∏
@dp.message_handler(lambda message: message.text.split()[0].strip().lower() in ['—Ä–µ—à–∏', '—Å–∞–ø —Ä–µ—à–∏', '.—Ä–µ—à–∏', '!—Ä–µ—à–∏'])
async def solve_expression(message: types.Message):
    expression = re.search(r'\.—Ä–µ—à–∏ (.+)', message.text).group(1)
    try:
        expr = sympify(expression)
        result = solve(expr)
        if len(result) == 0:
            solution = expr.evalf()
            await message.reply(f"üë®‚Äçüè´ {expression} = {solution}")
        else:
            await message.reply(f"üë®‚Äçüè´ {expression} = {result}")
    except Exception as e:
        await message.reply("–ö–∞–∂–µ—Ç—Å—è, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø—Ä–∏–º–µ—Ä –≤–≤–µ–¥–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")


# –ü–∞—Å—Ö–∞–ª–∫–∏

@dp.message_handler(lambda message: message.text.lower() == '–∫–∞–∫ –¥–µ–ª–∞?')
async def how_are_you(message: Message):
    chance = random.random()
    if chance <= 0.09:
        await message.reply("–£ 4 –∞–¥–º–∏–Ω–∞ —Ç–æ—á–Ω–æ —Å—Ä–µ–¥–Ω–µ–Ω—å–∫–æ!")



# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —à—Ç—É—á–∫–∏:
async def block_user(chat_id, user_id, user, message_id):
    try:
        await bot.restrict_chat_member(chat_id, user_id, types.ChatPermissions(can_send_messages=False), until_date=int(time.time()) + 86400)
        
        user_link = f"[{user.full_name}](tg://user?id={user.id})"
        block_message = f"üÜò –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_link} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –Ω–∞ —Å—É—Ç–∫–∏."

        unblock_button = InlineKeyboardButton(text="–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"unblock_{user.id}")
        keyboard = InlineKeyboardMarkup().add(unblock_button)

        message = await bot.send_message(chat_id=chat_id, text=block_message, reply_markup=keyboard, parse_mode=types.ParseMode.MARKDOWN)
        
        return message.message_id, message_id  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –æ–±–æ–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

async def unblock_user(chat_id, user_id, moderator_id, block_message_id):
    try:
        moderator_chat_member = await bot.get_chat_member(chat_id, moderator_id)
        
        if moderator_chat_member.status not in ['administrator', 'creator']:
            return          
        user_chat_member = await bot.get_chat_member(chat_id, user_id)

        if user_chat_member.status not in ['administrator', 'creator']:
            await bot.restrict_chat_member(chat_id, user_id, types.ChatPermissions(can_send_messages=True))
        else:
            return
        
        user_link = f"[{user_chat_member.user.full_name}](tg://user?id={user_id})"
        admin_link = f"[{moderator_chat_member.user.full_name}](tg://user?id={moderator_id}"
        
        block_message = f"üÜò –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_link} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –Ω–∞ —Å—É—Ç–∫–∏.\n\n‚òëÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω\n–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä: {admin_link}"
        
        await bot.edit_message_text(chat_id=chat_id, message_id=block_message_id, text=block_message, parse_mode=types.ParseMode.MARKDOWN)
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

@dp.message_handler()
async def check_message(message: types.Message):
    chat_id = message.chat.id  
    if re.search(r't(?:elegram)?\.me\/(.+)', message.text):
        user = message.from_user
        chat_member = await bot.get_chat_member(chat_id, user.id)
        
        if chat_member.status in ['administrator', 'creator']:
            return  # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Å—ã–ª–∫—É
        
        await bot.delete_message(chat_id, message.message_id)
        
        link_message_id = message.message_id  
        block_message_id, link_message_id = await block_user(chat_id, user.id, user, link_message_id)
        
        await asyncio.sleep(5)
        
        if block_message_id:
            await unblock_user(chat_id, user.id, user.id, block_message_id)

@dp.callback_query_handler(lambda query: query.data.startswith('unblock'))
async def process_unblock_callback(callback_query: types.CallbackQuery):
    chat_id = callback_query.message.chat.id
    user_id = int(callback_query.data.split('_')[1])
    block_message_id = callback_query.message.message_id
    
    user = await bot.get_chat_member(chat_id, user_id)
    if user.status in ['administrator', 'creator']:
        return
    
    moderator_id = callback_query.from_user.id
    moderator = await bot.get_chat_member(chat_id, moderator_id)
    
    if moderator.status not in ['administrator', 'creator']:
        return
    
    await unblock_user(chat_id, user_id, moderator_id, block_message_id)

    await bot.answer_callback_query(callback_query.id, text="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")









async def send_message():
    channel_message = await bot.send_message('-1001996822806', "–ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏‚¨áÔ∏è")
    return channel_message

@dp.message_handler(lambda message: message.text.split()[0].strip().lower() in ['.–∞–∫—Ç–∏–≤', '—Å–∞–ø –∞–∫—Ç–∏–≤', '.–∞–∫—Ç–∏–≤', '!–∞–∫—Ç–∏–≤'])
async def send_activity(message: types.Message):
    chat_member = await bot.get_chat_member(message.chat.id, message.from_user.id)
    if chat_member.status not in ['creator', 'administrator']:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return
    
    sent_message = await message.answer("–ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–∏–∂–µ.")
    channel_message = await send_message()
    await bot.forward_message(chat_id=message.chat.id, from_chat_id=channel_message.chat.id, message_id=channel_message.message_id)





async def send_welcome(chat_id, message_id):
    await bot.send_message(chat_id,
                           '''üìå –ó–∞–∫—Ä–µ–ø–ª—ë–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      
      –ü–µ—Ä–µ–¥ —Ç–µ–º –∫–∞–∫ –Ω–∞—á–∞—Ç—å –ø–∏—Å–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å [–ø—Ä–∞–≤–∏–ª–∞–º–∏](https://teletype.in/@drmotory/chatrules).
      –•–æ—Ç–∏—Ç–µ –≤–ª–∏—Ç—å—Å—è –≤ –∫–æ–ª–ª–µ–∫—Ç–∏–≤?–ü—Ä–æ—á–∏—Ç–∞–π—Ç–µ –Ω–∞—à –≥–∞–π–¥ ¬´[ü´Ç–ö–∞–∫ –≤–ª–∏—Ç—å—Å—è –≤ –∫–æ–ª–ª–µ–∫—Ç–∏–≤](https://teletype.in/@drmotory/collective-2)¬ª.\n\n_–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–Ω–∏–º–∞–Ω–∏–µ._''',
                           parse_mode="Markdown",
                           reply_markup=create_markup(),
                           reply_to_message_id=message_id)  


def create_markup():
    markup = types.InlineKeyboardMarkup()
    markup.row(
        types.InlineKeyboardButton('–ü—Ä–∞–≤–∏–ª–∞', url='https://teletype.in/@drmotory/chatrules'),
        types.InlineKeyboardButton('–º–æ–π —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥', url='https://teletype.in/@drmotory/commands_support')
    )
    return markup


@dp.message_handler(content_types=types.ContentType.TEXT, is_forwarded=True)
async def handle_forwarded_message(message: types.Message):
    if message.forward_from_chat.type == 'channel':
        await send_welcome(message.chat.id, message.message_id)


@dp.message_handler()
async def handle_messages(message: types.Message):
    chat_member = await bot.get_chat_member(message.chat.id, message.from_user.id)

    if chat_member.status in ['administrator', 'creator'] and message.text.startswith('.–¥–µ–ª '):
        chat_permissions = chat_member.can_delete_messages

        if chat_permissions:
            await delete_messages(message)
        else:
            await bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π.")


async def delete_messages(message: types.Message):
    error_message = None

    try:
        number = int(message.text.split('.–¥–µ–ª ')[1])

        if number > 0:
            replied_message_id = message.reply_to_message.message_id

            for i in range(number):
                try:
                    await bot.delete_message(message.chat.id, replied_message_id - i)
                except Exception as e:
                    error_message = f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å ID {replied_message_id - i}: {e}"

            if not error_message:
                await bot.send_message(message.chat.id, f"–Ø —É–¥–∞–ª–∏–ª {number} –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.")
                await bot.send_sticker(message.chat.id,
                                       "CAACAgIAAxkBAAI2nGWFXKEM4_NOSx3PQJUcQuWqFU2RAALMFQACdWepSdykWqEAAVfrBDME")

        else:
            await bot.send_message(message.chat.id,
                                   "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –∏ —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Å –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–∞—á–∞—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ.")
    except (ValueError, AttributeError, IndexError):
        await bot.send_message(message.chat.id,
                               "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –∏ —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Å –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–∞—á–∞—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ.")


admin_chat_id = '-1002129257694'
message_limit = 5
time_window = 10
alert_interval = 300
alert_interval_per_user = 300
user_messages = {}
last_alert_time = {}
flood_detected_users = set()


@dp.message_handler(content_types=['text', 'audio', 'photo', 'voice', 'video', 'document', 'sticker', 'animation'])
async def check_message_frequency(message: types.Message):
    user_id = message.from_user.id
    user_profile = f"[{message.from_user.first_name}](tg://user?id={user_id})"
    current_time = time.time()

    if user_id in user_messages:
        message_times = user_messages[user_id]
        message_times = list(filter(lambda x: current_time - x <= time_window, message_times))



        if len(message_times) > message_limit and user_id not in flood_detected_users:
            if user_id not in last_alert_time or current_time - last_alert_time[user_id] >= alert_interval:
                await bot.send_message(admin_chat_id,
                                       f"–í —á–∞—Ç–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_profile} –∑–∞–º–µ—á–µ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ—Ö–æ–∂–∞—è –Ω–∞ —Ñ–ª—É–¥. –ù–∞–¥–æ –±–æ—Ä–æ—Ç—å—Å—è —Å —Ñ–ª—É–¥–æ–º!",
                                       parse_mode="Markdown")
                last_alert_time[user_id] = current_time

                message_url = f"https://t.me/{message.chat.username}/{message.message_id}"
                await bot.send_message(admin_chat_id, f"[–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ]({message_url})", parse_mode="Markdown")

                flood_detected_users.add(user_id)
        elif len(message_times) > message_limit - 1:
            permissions = types.ChatPermissions(can_send_messages=False)
            await bot.restrict_chat_member(message.chat.id, user_id, permissions, until_date=int(time.time()) + 1800)
            await bot.send_message(admin_chat_id,
                                   f"–§–ª—É–¥ –æ—Ç {user_profile} –Ω–µ –ø—Ä–µ–∫—Ä–∞—â–∞–µ—Ç—Å—è. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏–ª –º—É—Ç –Ω–∞ 30 –º–∏–Ω—É—Ç.",
                                   parse_mode="Markdown")
            flood_detected_users.add(user_id)

        if user_id in last_alert_time and current_time - last_alert_time[user_id] < alert_interval_per_user:
            last_alert_time[user_id] = current_time

    if user_id in user_messages:
        user_messages[user_id].append(current_time)
    else:
        user_messages[user_id] = [current_time]


bot_stopped = False


async def on_startup(dp: Dispatcher):
    pass

#async def on_shutdown(dp: Dispatcher):
#    global bot_stopped
#    if not bot_stopped:
#        await bot.send_message(chat_id='your_chat_id', text="–ë–æ—Ç –≤—ã–∫–ª—é—á–µ–Ω")
#        await bot.close()
#        bot_stopped = True


async def main() -> None:
    logging.basicConfig(level=logging.INFO)
    await on_startup(dp)

    try:
        await dp.start_polling(bot)
    except Exception as e:
        print(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –ø—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ --> {e}')


if __name__ == "__main__":
    asyncio.run(main())